# clone directory
clone_folder: C:\MuseScore
# fetch repository as zip archive
# shallow_clone: true                 # default is "false"
# set clone depth
clone_depth: 3                      # clone entire repository history if not defined
# environment variables
# this is how to allow failing jobs in the matrix
#matrix:
#  fast_finish: true
#  allow_failures:
#    - platform: x86
#      configuration: Release
# build cache to preserve files/folders between builds
cache:
  - dependencies.7z -> appveyor.yml
  - C:\Program Files (x86)\Jack -> appveyor.yml
  - C:\MuseScore\build.release\thirdparty -> appveyor.yml
#cache:
#  - packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified
#  - projectA\libs
#  - node_modules                    # local npm modules
#  - %APPDATA%\npm-cache             # npm cache
# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform:
  - x86
# build Configuration, i.e. Debug, Release, etc.
configuration: Release
# Update msys2
install:
  - C:\msys64\usr\bin\bash -lc "pacman --needed --noconfirm -Sy pacman-mirrors"
  - C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Sy"
  - C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Sy make mingw-w64-i686-cmake mingw-w64-i686-lame mingw-w64-i686-libsndfile mingw-w64-i686-libvorbis mingw-w64-i686-portaudio mingw-w64-i686-qt5"
# mingw-w64-i686-gcc mingw-w64-i686-cmake make
# scripts to run before build
before_build:
  - IF NOT EXIST dependencies.7z (
    start " " /wait "C:\MinGW\msys\1.0\bin\wget" --no-check-certificate "https://drive.google.com/uc?export=download&id=0BxjayMZiuupOSXF6a0ZDUG5rNDg" -O dependencies.7z &&
    start " " /wait "7z" x -y dependencies.7z > nul &&
    cd dependencies &&
    xcopy Jack "C:\Program Files (x86)\Jack" /E /I
    )
  - cd C:\MuseScore
  - set PATH=C:\msys64\mingw32\bin;C:\msys64\usr\bin;C:\msys64\bin;%PATH%
  - set MSYSTEM=MINGW32
  - C:\msys64\usr\bin\bash -lc "cd /c/MuseScore && mingw32-make -f Makefile.msys revision"
  # CMake refuses to generate MinGW Makefiles if sh.exe is in the Path
  # - set PATH=C:\Qt\5.4\mingw491_32\bin;C:\Qt\Tools\mingw491_32\bin;C:\Program Files (x86)\CMake\bin;C:\Program Files\7-Zip;C:\ccache\bin
  - set PATH=C:\msys64\mingw32\bin;C:\msys64\usr\bin;C:\msys64\bin;C:\Program Files\7-Zip
  - set /p MSversion=<mscore\revision.h
  # Ugly hack to prevent the error: add_library cannot create imported target "Qt5::Q...Factory" because another target with the same name already exists.
  - copy /y NUL C:\msys64\mingw32\lib\cmake\Qt5Qml\Qt5QmlConfigExtras.cmake
# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
#before_package:
# scripts to run after build
after_build:
  - cmd: 7z a C:\MuseScore\MuseScoreTest%MSversion%.7z C:\MuseScore\win32install
  - cd C:\MuseScore
artifacts:
  - path: MuseScoreTest$(MSversion).7z
deploy:
- provider: BinTray
  username: antoniobl
  api_key:
    secure: 2hZMhDAPtVbeoNZHA0GSzenAHtU+g4SzW4KwJp1h9/r7uWr2j9kMYo93iOGlEvtp
  subject: antoniobl
  repo: archive
  package: musescoretest
  version: $(MSversion)
  publish: true
  override: true
# to run your custom scripts instead of automatic MSBuild
build_script:
  - C:\msys64\usr\bin\bash -lc "cd /c/MuseScore && mingw32-make -f Makefile.msys release && mingw32-make -f Makefile.msys install"
